#import "style.typ": *
#show: style

// sample color, see .vscode/color.code-snippets

#text("8534ff purple", rgb("#8534ff"))\
#text("2f00ff purple-blue", rgb("#2f00ff"))\
#text("0056e1 blue", rgb("#0056e1"))\
#text("006dea blue-bright", rgb("#006dea"))\
#text("008690 aqua", rgb("#008690"))\
#text("34a500 green", rgb("#34a500"))\
#text("5ea100 green-yellow", rgb("#5ea100"))\
#text("c3b900 yellow", rgb("#c3b900"))\
#text("a59d00 yellow-dark", rgb("#a59d00")) \
#text("cf9f00 gold", rgb("#cf9f00"))\
#text("d25b00 orange", rgb("#d25b00"))\
#text("e90000 red", rgb("#e90000"))\
#text("d10000 red-dark", rgb("#d10000"))\
#text("c10047 pink", rgb("#c10047"))\
#text("676767 gray", rgb("#676767"))\
#text("919191 silver", rgb("#919191"))

#let color-symbol(body) = {
  // colorized symbol, see .vscode/symbol.code-snippets

  // bracket

  show regex("‚àÄ|‚àÉ"): it => text(it, rgb("#0056e1"))

  show regex("\(|\)|\[|\]|\{|\}|‚ü®|‚ü©"): it => text(it, rgb("#2f00ff"))

  show "|": it => text($|$, rgb("#006dea"))
  show "‚Äñ": it => text($‚Äñ$, rgb("#006dea"))

  // logic

  show regex("‚àß|‚à®|¬¨"): it => text(it, rgb("#0056e1"))

  show regex("‚áí|‚áê|‚áî|‚üπ|‚ü∏|‚ü∫"): it => text(it, rgb("#a59d00"))

  // ‚áí : =>. ‚üπ : ==>. warning: no shothand. <= is ‚©Ω

  /*
      ‚áí : =>
      ‚üπ : ==>
      warning: ‚áê have no shothand. <= is ‚©Ω
  */

  show regex("=|‚â†|‚â°|‚àà|‚àâ|‚äÇ|‚äÉ|‚äÑ|‚ää|‚äã"): it => text(it, rgb("#8534ff"))

  show "‚àñ": it => text(it, rgb("#0056e1"))

  show "‚àÖ": it => text(it, rgb("#cf9f00"))

  show regex(":|‚âï|‚âî"): it => text(it, rgb("#cf9f00"))
  show ",": it => text(it, rgb("#2f00ff"))

  show "‚âà": it => text(it, rgb("#2f00ff"))

  show regex("‚à™|‚à©|‚ãÉ|‚ãÇ|‚äî|‚®Ü"): it => text(it, rgb("#0056e1"))

  show regex(">|<"): it => text(it, rgb("#0056e1"))
  show "‚â•": it => text(math.gt.slant, rgb("#0056e1")) // >=
  show "‚â§": it => text(math.lt.slant, rgb("#0056e1")) // <=

  // mathbb

  show regex("‚Ñù|‚ÑÇ|‚Ñç|ùïÜ|ùïÇ|‚Ñï|‚Ñ§|‚Ñö|ùïä|‚Ñô|ùîπ|ùï™"): it => text(it, rgb("#2f00ff"))

  show "ùüô": it => text(it, rgb("#e90000"))

  // differential

  show regex("‚àÇ|‚àá|‚àÜ"): it => text(it, rgb("#d25b00")) // ‚àá : nabla, connection. ‚àÜ : Laplacian

  show "‚à´": it => text(it, rgb("#0056e1"))

  show regex("‚àë|‚àè"): it => text(it, rgb("#0056e1"))

  // arrow

  show regex("‚Üí|‚ü∂|‚Üê|‚üµ|‚áù|‚áú|‚üø|‚¨≥|‚Ü™|‚Ü†|‚àº|‚âÉ|‚Üî|‚ü∑|‚áÜ"): it => text(it, rgb("#0056e1"))

  // dot

  show ".": it => text(it, rgb("#e90000"))
  show "¬∑": it => text(it, rgb("#e90000")) // dot.c, center dot

  show "‚Ä¶": it => $#h(0.05em) . #h(-0.07em) . #h(-0.07em) . #h(0.05em)$

  show "‚ãØ": it => $#h(0.1em) ¬∑ #h(-0.07em) ¬∑ #h(-0.07em) ¬∑ #h(0.1em)$

  show "‚ã±": it => text(it, rgb("#e90000"))

  show "‚ãÆ": it => text(it, rgb("#e90000"))

  // operator

  show regex("√ó|‚®â|‚ãä|\+|‚àí|‚ãÖ|¬±|‚àì|‚àò|‚äó|‚äô|‚®Ç|‚®Ä|‚äï|‚®Å|‚ßÄ"): it => text(it, rgb("#0056e1"))

  show regex("‚ãÄ|‚ãÅ"): it => text(it, rgb("#0056e1"))

  /*
      ‚ãä : semi direct product
      ‚ãÖ : dot.op, operator dot
      ‚àò : compose
      ‚äó : tensor
      ‚äô : symmetric tensor
      ‚àß : alternating tensor
      ‚®Ç : Tensor
      ‚äï : direct sum, exclusive or
  */

  // function

  show regex("‚àó|‚Ä≤|‚Ä≥|‚ä∫|‚Ä†|‚Ä°|‚àÅ|‚óä|‚üÇ|‚ä§|‚ãÜ|‚ô≠|‚ôØ"): it => text(it, rgb("#006dea"))

  /*
    ‚ä∫ : transpose
    ‚Ä† : adjoint
    ‚àÅ : complement
    ‚óä : parity
    ‚üÇ : perpendicular, orthogonal_complement
  */

  show "‚ô≠": it => scale(it, 140%) // noto sans mans problem?

  show "Œî": it => text(it, rgb("#0056e1"))

  body
}

